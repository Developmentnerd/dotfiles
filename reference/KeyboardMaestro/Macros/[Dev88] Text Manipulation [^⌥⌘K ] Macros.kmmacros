<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>504290345.19832098</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>KeyCode</key>
						<integer>0</integer>
						<key>MacroActionType</key>
						<string>SimulateKeystroke</string>
						<key>Modifiers</key>
						<integer>256</integer>
						<key>ReleaseAll</key>
						<false/>
					</dict>
					<dict>
						<key>KeyCode</key>
						<integer>8</integer>
						<key>MacroActionType</key>
						<string>SimulateKeystroke</string>
						<key>Modifiers</key>
						<integer>256</integer>
						<key>ReleaseAll</key>
						<false/>
					</dict>
					<dict>
						<key>MacroActionType</key>
						<string>CopyClipboard</string>
						<key>SourceNamedClipboardRedundantDisplayName</key>
						<string>Default Clipboard</string>
						<key>SourceNamedClipboardUID</key>
						<string>FB064CD3-273C-4D17-8AE7-6085AB14AD66</string>
						<key>SourceUseNamedClipboard</key>
						<false/>
						<key>TargetNamedClipboardRedundantDisplayName</key>
						<string>Markdown Ref Links</string>
						<key>TargetNamedClipboardUID</key>
						<string>020A05C3-3FBB-4372-A0AA-A0A563D8C0C7</string>
						<key>TargetUseNamedClipboard</key>
						<true/>
					</dict>
					<dict>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>%NamedClipboard%Markdown Ref Links%</string>
						<key>Variable</key>
						<string>MD_CONTENT</string>
					</dict>
					<dict>
						<key>ClipboardTargetNamedClipboardRedundantDisplayName</key>
						<string>Markdown Ref Links</string>
						<key>ClipboardTargetNamedClipboardUID</key>
						<string>020A05C3-3FBB-4372-A0AA-A0A563D8C0C7</string>
						<key>ClipboardTargetUseNamedClipboard</key>
						<true/>
						<key>DisplayKind</key>
						<string>Clipboard</string>
						<key>IncludeStdErr</key>
						<true/>
						<key>MacroActionType</key>
						<string>PlugIn</string>
						<key>PlugInFolderName</key>
						<string>km-execute_ruby_script</string>
						<key>PlugInParameters</key>
						<dict>
							<key>Ruby Code</key>
							<string>require 'shellwords'

if RUBY_VERSION.to_f &gt; 1.9
	input = ENV.fetch("KMVAR_MD_CONTENT").dup.force_encoding('utf-8')
else
	input = ENV.fetch("KMVAR_MD_CONTENT").dup
end

def find_headers(lines)
    in_headers = false
    lines.each_with_index {|line, i|
        if line =~ /^\w[^\:\[]+\:( .*?)?$/
            in_headers = true
        elsif in_headers === true
            return i
        else
            return false
        end
    }
end

links = input.scan(/\((https?:\/\/([^\)]+))\)/)
refs = input.scan(/^ {0,3}\[[^\^]([^\]]+)\]: (\S+)$/)
lines = input.split("\n")

bottom = lines[0..-1].join("\n").gsub(/^\[[^\^]([^\]]+)\]: (\S+)\n?/,'')

norepeat = []
norepeatlinks = []
output = []

refs.each {|ref|
	name = ref[0]
	next if norepeatlinks.include? ref[1]
	while norepeat.include? name
		if name =~ / ?[0-9]$/
			name.next!
		else 
			name = name + " 2"
		end
	end
	output &lt;&lt; {'orig' =&gt; ref[0], 'title' =&gt; name, 'link' =&gt; ref[1]}
	norepeat.push name
	norepeatlinks.push ref[1]
}

links.each {|url| 
		next if norepeatlinks.include? url[0]
		domain = url[0].match(/https?:\/\/([^\/]+)/)
		parts = domain[1].split('.')
		name = case parts.length
			when 1
				parts[0]
			when 2
				parts[0]
			else parts[1]
		end
	while norepeat.include? name
		if name =~ / ?[0-9]$/
			name.next!
		else 
			name = name + " 2"
		end
	end
	output &lt;&lt; {'orig' =&gt; url[0], 'title' =&gt; name, 'link' =&gt; url[0] }
	norepeat.push name
	norepeatlinks.push url[0]
}
output = output.sort {|a,b| a['title'] &lt;=&gt; b['title']}
o = []

output.each_with_index { |x,i| 
	o.push("[#{x['title']}]: #{x['link']}")
	bottom = bottom.gsub(/\((#{Shellwords.escape(x['orig'])}|#{Shellwords.escape(x['link'])})\)/,"[#{x['title']}]").gsub(/\[#{Shellwords.escape(x['orig'])}\]/,"[#{x['title']}]")
}
puts bottom + "\n\n#{o.join("\n")}\n"</string>
						</dict>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
					</dict>
					<dict>
						<key>Action</key>
						<string>Paste</string>
						<key>MacroActionType</key>
						<string>ClipboardSwitcherMacroAction</string>
						<key>Name</key>
						<string>020A05C3-3FBB-4372-A0AA-A0A563D8C0C7</string>
						<key>RedundandDisplayName</key>
						<string>Markdown Ref Links</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>504274417.86040998</real>
				<key>ModificationDate</key>
				<real>504290209.78560698</real>
				<key>Name</key>
				<string>1. [md] Inline Links to Ref</string>
				<key>Triggers</key>
				<array>
					<dict>
						<key>FireType</key>
						<string>Pressed</string>
						<key>KeyCode</key>
						<integer>40</integer>
						<key>MacroTriggerType</key>
						<string>HotKey</string>
						<key>Modifiers</key>
						<integer>6400</integer>
					</dict>
				</array>
				<key>UID</key>
				<string>A116AA72-92A3-4B56-BFC8-F42E511D9B8D</string>
			</dict>
		</array>
		<key>Name</key>
		<string>[Dev88] Text Manipulation [^⌥⌘K ]</string>
		<key>ToggleMacroUID</key>
		<string>D4BC3BF7-652B-478C-9612-C1BD4EBDDAE9</string>
		<key>UID</key>
		<string>6CE270B7-09A7-428C-A0C7-4CFB9341C003</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>504290345.19832098</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>KeyCode</key>
						<integer>8</integer>
						<key>MacroActionType</key>
						<string>SimulateKeystroke</string>
						<key>Modifiers</key>
						<integer>256</integer>
						<key>ReleaseAll</key>
						<false/>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>CopyClipboard</string>
						<key>SourceNamedClipboardRedundantDisplayName</key>
						<string>Default Clipboard</string>
						<key>SourceNamedClipboardUID</key>
						<string>FB064CD3-273C-4D17-8AE7-6085AB14AD66</string>
						<key>SourceUseNamedClipboard</key>
						<false/>
						<key>TargetNamedClipboardRedundantDisplayName</key>
						<string>TitleCase</string>
						<key>TargetNamedClipboardUID</key>
						<string>EFE66C07-136E-4060-A7DF-FAE39A4F20EF</string>
						<key>TargetUseNamedClipboard</key>
						<true/>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>%NamedClipboard%TitleCase%</string>
						<key>Variable</key>
						<string>TITLE_CASE</string>
					</dict>
					<dict>
						<key>ClipboardTargetNamedClipboardRedundantDisplayName</key>
						<string>TitleCase</string>
						<key>ClipboardTargetNamedClipboardUID</key>
						<string>EFE66C07-136E-4060-A7DF-FAE39A4F20EF</string>
						<key>ClipboardTargetUseNamedClipboard</key>
						<true/>
						<key>DisplayKind</key>
						<string>Clipboard</string>
						<key>IncludeStdErr</key>
						<true/>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>PlugIn</string>
						<key>PlugInFolderName</key>
						<string>km-execute_ruby_script</string>
						<key>PlugInParameters</key>
						<dict>
							<key>Ruby Code</key>
							<string>class String
  def titlecase
    small_words = %w(a an and as at but by en for if in of on or the to with v v. via vs vs.)
    
    x = split(" ").map do |word|
      # note: word could contain non-word characters!
      # downcase all small_words, capitalize the rest
      small_words.include?(word.gsub(/\W/, "").downcase) ? word.downcase! : word.smart_capitalize!
      word
    end
    # capitalize first and last words
    x.first.to_s.smart_capitalize!
    x.last.to_s.smart_capitalize!
    # small words after colons are capitalized
    x.join(" ").gsub(/:\s?(\W*#{small_words.join("|")}\W*)\s/) { ": #{$1.smart_capitalize} " }
  end
  
  def titlecase!
    replace(titlecase)
  end
  
  def smart_capitalize
    # ignore any leading crazy characters and capitalize the first real character
    if self =~ /^['"\(\[']*([a-z])/
      i = index($1)
      x = self[i,self.length]
      # word with capitals and periods mid-word are left alone
      self[i,1] = self[i,1].upcase unless x =~ /[A-Z]/ or x =~ /\.\w+/
    end
    self
  end
  
  def smart_capitalize!
    replace(smart_capitalize)
  end
end

ENV.fetch("KMVAR_TITLE_CASE").dup.titlecase</string>
						</dict>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
					</dict>
					<dict>
						<key>Action</key>
						<string>Paste</string>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>ClipboardSwitcherMacroAction</string>
						<key>Name</key>
						<string>EFE66C07-136E-4060-A7DF-FAE39A4F20EF</string>
						<key>RedundandDisplayName</key>
						<string>TitleCase</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>504273754.57320702</real>
				<key>ModificationDate</key>
				<real>504290341.05245</real>
				<key>Name</key>
				<string>2. Title Case Selection</string>
				<key>Triggers</key>
				<array>
					<dict>
						<key>FireType</key>
						<string>Pressed</string>
						<key>KeyCode</key>
						<integer>40</integer>
						<key>MacroTriggerType</key>
						<string>HotKey</string>
						<key>Modifiers</key>
						<integer>6400</integer>
					</dict>
				</array>
				<key>UID</key>
				<string>F6F148F9-A6EF-4508-8B4A-9C0A3D701AF1</string>
			</dict>
		</array>
		<key>Name</key>
		<string>[Dev88] Text Manipulation [^⌥⌘K ]</string>
		<key>ToggleMacroUID</key>
		<string>D4BC3BF7-652B-478C-9612-C1BD4EBDDAE9</string>
		<key>UID</key>
		<string>6CE270B7-09A7-428C-A0C7-4CFB9341C003</string>
	</dict>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>504290345.19832098</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>Text</key>
						<string>If you want to change where the temporary file is stored, edit the EDIT_ANYWHERE_FILE variable.

Note that the filename (and path, if any) will be relative to your $HOME. So, for example, if you want to use a file named ~/Dropbox/txt/my-very-special-name-here.txt then you should set the variable to "Dropbox/txt/my-very-special-name-here.txt" 

Do NOT include the /Users/YourNameHere/ part of the path, that will be added automatically later.

Do not change the variable name (EDIT_ANYWHERE_FILE) just change the part in the "To:" field.

</string>
						<key>Title</key>
						<string>Note: You can customize 'EDIT_ANYWHERE_FILE'</string>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>edit_anywhere.txt</string>
						<key>Variable</key>
						<string>EDIT_ANYWHERE_FILE</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Store to the name of the active application to the variable ‘EditAnywhereApp’</string>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>%Application%1%</string>
						<key>Variable</key>
						<string>EditAnywhereApp</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Type the ⌘A Keystroke (This should trigger 'Select All Text')</string>
						<key>IsDisclosed</key>
						<false/>
						<key>KeyCode</key>
						<integer>0</integer>
						<key>MacroActionType</key>
						<string>SimulateKeystroke</string>
						<key>Modifiers</key>
						<integer>256</integer>
						<key>ReleaseAll</key>
						<false/>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Type the ⌘A Keystroke (This should trigger 'Select All Text')</string>
						<key>IsDisclosed</key>
						<false/>
						<key>KeyCode</key>
						<integer>0</integer>
						<key>MacroActionType</key>
						<string>SimulateKeystroke</string>
						<key>Modifiers</key>
						<integer>256</integer>
						<key>ReleaseAll</key>
						<false/>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Pause</string>
						<key>Time</key>
						<string>1</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>KeyCode</key>
						<integer>7</integer>
						<key>MacroActionType</key>
						<string>SimulateKeystroke</string>
						<key>Modifiers</key>
						<integer>256</integer>
						<key>ReleaseAll</key>
						<false/>
					</dict>
					<dict>
						<key>Action</key>
						<string>ByTyping</string>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>InsertText</string>
						<key>Text</key>
						<string>(Waiting for EditAnywhere)</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Type the ⌘A Keystroke (This should trigger 'Select All Text')</string>
						<key>IsDisclosed</key>
						<false/>
						<key>KeyCode</key>
						<integer>0</integer>
						<key>MacroActionType</key>
						<string>SimulateKeystroke</string>
						<key>Modifiers</key>
						<integer>256</integer>
						<key>ReleaseAll</key>
						<false/>
					</dict>
					<dict>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Pause</string>
						<key>Time</key>
						<string>.5</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>This is where the magic happens</string>
						<key>DisplayKind</key>
						<string>None</string>
						<key>IncludeStdErr</key>
						<true/>
						<key>MacroActionType</key>
						<string>ExecuteShellScript</string>
						<key>Path</key>
						<string>/usr/local/scripts/km-edit-anywhere-any-editor.sh</string>
						<key>Text</key>
						<string>#!/bin/zsh -f

## This is the app that you want to use as your external editor
## Note that it should not include the '.app' suffix
##
## Examples:
##  APP='BBEdit'
##  APP='TextWrangler'
##  APP='MultiMarkdown Composer'
##  APP='Sublime Text'
##  APP='Atom'

APP='Atom'

## OS X no longer has a good way to ensure that GUI apps like
## Keyboard Maestro have access to your $PATH so I often just create
## a text file in my $HOME which I can use in all my scripts. This
## checks to see if that file exists, and if it does not exist, it
## will use the PATH as defined in the second half of the if/else

if [[ -e "$HOME/.path" ]]
then
    source "$HOME/.path"
else
    PATH=/usr/local/scripts:/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/bin
fi

####|####|####|####|####|####|####|####|####|####|####|####|####|####|####
#
#       You should not ~need~ to edit anything below this line
#


    ######################################################################
    ## This is the name of the temporary file which will be used to keep
    ## your edits before it is sent back to the app where it came from.
    ##
    ## This is now based on a variable set in the Keyboard Maestro macro
    ##

    ## If, for some reason, the filename is NOT set, use a reasonable default
[[ "$KMVAR_EDIT_ANYWHERE_FILE" == "" ]] &amp;&amp; KMVAR_EDIT_ANYWHERE_FILE='edit_anywhere.txt'

    ## Try to protect against someone putting '..' in the file path and
    ## attempting to get out of the $HOME I don't know if this is
    ## actually necessary, but once it occurred to me, I figured I might
    ## as well add it.
FILE=`echo "${HOME}/${KMVAR_EDIT_ANYWHERE_FILE}" | tr -s '.' '.'`


NAME="[Edit Anywhere via Keyboard Maestro]"

    ## Change this if necessary
    ## Used for pbcopy and pbpaste
LANG=en_US.UTF-8

###########################################################################################
###########################################################################################
##
## Here is where the action begins
##

    ## What do we do if they asked for a path which does not exist?
    ## Well, we will try to create the folder and then paste the file in there
PARENT_DIR="$FILE:h"

[[ ! -d "$PARENT_DIR" ]] &amp;&amp; mkdir -p "$PARENT_DIR" &amp;&amp; msg "Created $PARENT_DIR for $FILE"

if [[ -e "$FILE" ]]
then
    pbpaste &gt;&gt; "$FILE"
else
    pbpaste &gt; "$FILE"
fi

EXIT="$?"

if [ "$EXIT" != "0" ]
then

    msg "FATAL ERROR: Failed to create file at $FILE. Exit = $EXIT. Sorry."

        ## if we can't create the file, send the contents of the
        ## pasteboard to a temp file in TextEdit at least so the user
        ## will not lose whatever they had there at least
    /usr/bin/pbpaste | /usr/bin/open -e -f

    exit 1
fi


if [[ "$KMVAR_EditAnywhereApp" == "" ]]
then
    ## "$KMVAR_EditAnywhereApp" is not set. ABORT.

    msg "Variable KMVAR_EditAnywhereApp is empty. Giving up."

        ## Open the file in the default text editor
        ## so the user knows their text has not been lost
    /usr/bin/open -t "$FILE"

    exit 1

else
        ## Tell the user what app we took text from
        ## This is mostly a debugging comment and could be removed if it annoys you
    msg "Will send text back to: $KMVAR_EditAnywhereApp"

fi


if (( $+commands[bbedit] ))
then
        ## We found the command line bbedit tool
    CL_BBEDIT='yes'
else
        ## We did NOT find the command line bbedit tool
    CL_BBEDIT='no'
fi

if (( $+commands[subl] ))
then
        ## We found the command line subl tool
    CL_SUBL='yes'
else
        ## We did NOT find the command line subl tool
    CL_SUBL='no'
fi

if (( $+commands[atom] ))
then
        ## We found the command line subl tool
    CL_ATOM='yes'
else
        ## We did NOT find the command line subl tool
    CL_ATOM='no'
fi

if [[ "$CL_BBEDIT" = "yes" &amp;&amp; "$APP:l" == "bbedit" ]]
then
        ## IFF the user wants to use BBEdit and they have the bbedit
        ## command line tool installed, then we will use the bbedit tool

        ## if BBEdit is not running, launch it
    pgrep -xq BBEdit || (open -a BBEdit &amp;&amp; sleep 3)

        ## We will try to open the app with the bbedit command,
        ## but if it fails we will open TextEdit
    bbedit \
        --language 'Markdown' \
        --create-unix \
        --new-window \
        --resume \
        --wait \
        -- "$FILE" \
     || open -n -e -W "$FILE"
# else if app is Atom
elif [[ "$CL_ATOM" = "yes" &amp;&amp; "$APP:l" == "atom" ]] 
then
        ## IFF the user wants to use Sublime Text and they have the subl
        ## command line tool installed, then we will use the subl tool

        ## if Sublime Text is not running, launch it
    pgrep -xq "Atom" || (open -a "Atom" &amp;&amp; sleep 3)

        ## We will try to open the app with the subl command,
        ## but if it fails we will open TextEdit
    atom \
        --new-window \
        --wait \
        -- "$FILE" \
     || open -n -e -W "$FILE"
# else if app is Atom
elif [[ "$CL_SUBL" = "yes" &amp;&amp; "$APP:l" == "sublime text" ]] 
then
       ## IFF the user wants to use Sublime Text and they have the subl
       ## command line tool installed, then we will use the subl tool

       ## if Sublime Text is not running, launch it
   pgrep -xq "Sublime Text" || (open -a "Sublime Text" &amp;&amp; sleep 3)

       ## We will try to open the app with the subl command,
       ## but if it fails we will open TextEdit
   subl \
       --new-window \
       --wait \
       -- "$FILE" \
    || open -n -e -W "$FILE"

else
        ## if we get here, either the app is NOT BBEdit or Sublime Text
        ## or they do not have the `bbedit`/`subl` tool installed

        ## We will try to open the file in the requested app
        ## but if the open command fails for some reason,
        ## we will open TextEdit

    open -a "$APP" -n -W "$FILE" || open -n -e -W "$FILE"

fi # if app is BBEdit or Sublime

EXIT="$?"

if [ "$EXIT" != "0" ]
then

    ## If we get here, something went wrong

    msg "Unable to open $FILE in $APP."

        ## Show the file in the Finder, so the user can try to do something with it
    /usr/bin/open -R "$FILE"

    exit 1
fi

## If we get here, `open` or `bbedit` exited successfully


    ## Make sure that the app we want to paste into is actually running
    ## it *should* be, but it's possible that it either crashed or the
    ## user quit it in the interim, so let's check

pgrep -xq "$KMVAR_EditAnywhereApp"

EXIT="$?"

if [ "$EXIT" = "1" ]
then

        ## If we get here, the app is NOT running, so let's tell the user
        ## that we are launching it.

    msg "Launching $KMVAR_EditAnywhereApp so we can paste to it"


        ## Here is where we actually launch the app
    open -a "$KMVAR_EditAnywhereApp"

        ## now we need to give it a few seconds to get itself running
        ## This is guesswork, because we don't know how long it will
        ## take for the app to launch and be ready to accept input
    sleep 5
fi

        ## Tell the user we are ready to paste information back to the source app
    msg "Pasting text to $KMVAR_EditAnywhereApp"

    ## Activate the app
    ## NOTE: originally this was not happening fast enough
    ## for it to be ready to accept a 'paste'
    ## when this script finished
    ## so I added some extra 'padding'
    ## and an extra 'open' call
    ## This should not harm anything.

open -a "$KMVAR_EditAnywhereApp"

    ## wait a second
sleep 1

    ## No no, REALLY activate the app
open -a "$KMVAR_EditAnywhereApp"


    ## copy the file back to the pasteboard
pbcopy &lt; "$FILE"

    ## OK, now we are done with the FILE so we have to either leave it there,
    ##  delete it, or move it to the trash.
    ## I don't want to leave it there when it has already been used,
    ##  and I don't want to delete it in case something went wrong
    ## So I'm going to move it to the trash instead
    ## AND I'm going to rename the file with the current time stamp so if I
    ## happen to have several of these and need to recover one,
    ## I can do that, as long as I haven't emptied my trash

        ## This will be 'edit_anywhere' without the path or extension
        ## unless you changed $FILE
    SHORT="$FILE:t:r"

        ## This will be 'txt' unless you changed $FILE
    EXT="$FILE:e"

/bin/mv -n "$FILE" "$HOME/.Trash/$SHORT.$EXT"

exit 0
#EOF</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TimeOutPeriod</key>
						<real>86400</real>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Paste contents of file back to "Source" app</string>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ConditionType</key>
									<string>Menu</string>
									<key>MenuConditionSelectionType</key>
									<string>Is</string>
									<key>MenuConditionType</key>
									<string>IsEnabled</string>
									<key>MenuModifiers</key>
									<integer>256</integer>
									<key>MenuShortcut</key>
									<string>C</string>
									<key>MenuTitle</key>
									<string>Paste</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>ElseActions</key>
						<array>
							<dict>
								<key>KeyCode</key>
								<integer>9</integer>
								<key>MacroActionType</key>
								<string>SimulateKeystroke</string>
								<key>Modifiers</key>
								<integer>256</integer>
								<key>ReleaseAll</key>
								<false/>
							</dict>
						</array>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>IfThenElse</string>
						<key>ThenActions</key>
						<array>
							<dict>
								<key>MacroActionType</key>
								<string>SelectMenuItem</string>
								<key>Menu</key>
								<array>
									<string>Edit</string>
									<string>Paste</string>
								</array>
								<key>TargetingType</key>
								<string>Front</string>
							</dict>
						</array>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>459387347.72605699</real>
				<key>ModificationDate</key>
				<real>504291453.08367801</real>
				<key>Name</key>
				<string>3. Edit Anywhere</string>
				<key>Triggers</key>
				<array>
					<dict>
						<key>FireType</key>
						<string>Pressed</string>
						<key>KeyCode</key>
						<integer>7</integer>
						<key>MacroTriggerType</key>
						<string>HotKey</string>
						<key>Modifiers</key>
						<integer>6400</integer>
					</dict>
				</array>
				<key>UID</key>
				<string>C21936F7-7A8B-409A-BB2B-7C3A0CABE17A</string>
			</dict>
		</array>
		<key>Name</key>
		<string>[Dev88] Text Manipulation [^⌥⌘K ]</string>
		<key>ToggleMacroUID</key>
		<string>D4BC3BF7-652B-478C-9612-C1BD4EBDDAE9</string>
		<key>UID</key>
		<string>6CE270B7-09A7-428C-A0C7-4CFB9341C003</string>
	</dict>
</array>
</plist>
